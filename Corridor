Challenge: https://tryhackme.com/room/corridor
You have found yourself in a strange corridor. Can you find your way back to where you came?

In this challenge, you will explore potential IDOR vulnerabilities. Examine the URL endpoints you access as you navigate the website and note the hexadecimal values you find (they look an awful lot like a hash, don't they?). This could help you uncover website locations you were not expected to access.

nmap scan

nmap -sC -sV $IP
Host is up (0.27s latency).
Not shown: 999 closed tcp ports (conn-refused)
PORT   STATE SERVICE VERSION
80/tcp open  http    Werkzeug httpd 2.0.3 (Python 3.10.2)
|_http-title: Corridor

we find only one open port(80) running Werkzeug httpd 2.0.3.

Web

Checking the source code of the web page we find href links with hashed values. Cracking the hashes at crackstation we see the create a sequence of 1,2,3 until 13. Visiting all of them redirect us to an empty page.

We can try an see beyond those numbers to check for any other "doors" that we can find.

i created a hashes.py script to generate as much hashes as i wanted from 0 to n so i did not have to do it manually.

the results were saved to a "hashes.txt" file.

running gobuster to check if we get any different result.

gobuster dir -u http://$IP -w /home/user/tHM/corridor/hashes.txt 

Gobuster v3.1.0
by OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)
===============================================================
[+] Url:                     http://10.10.123.63
[+] Method:                  GET
[+] Threads:                 10
[+] Wordlist:                /home/user/tHM/corridor/hashes.txt
[+] Negative Status codes:   404
[+] User Agent:              gobuster/3.1.0
[+] Timeout:                 10s
===============================================================
2022/10/02 02:15:45 Starting gobuster in directory enumeration mode
===============================================================

We got a hit with different size, trying that hash we get our flag.

-------------------------------------------
hashes.py

import hashlib

f = open("hashes.txt","w")

for i in range(0, 100):
	number = str(i)
	hash_object = hashlib.md5(number.encode())
	md5_hash = hash_object.hexdigest()
	with open("hashes.txt","a"):
		f.write(md5_hash)
		f.write('\n')

f.close()
